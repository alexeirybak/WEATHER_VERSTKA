{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://web_meteo/./src/api/apiKeyAndHost.js","webpack://web_meteo/./src/components/showRecentCities.js","webpack://web_meteo/./src/components/inputForm.js","webpack://web_meteo/./src/components/error.js","webpack://web_meteo/./src/helpers/checkCyrillic.js","webpack://web_meteo/./src/helpers/cityAbbreviation.js","webpack://web_meteo/./src/api/getWeatherAndForecast.js","webpack://web_meteo/./src/helpers/formatTime.js","webpack://web_meteo/./src/helpers/calcSunPosition.js","webpack://web_meteo/./src/components/currentWeather.js","webpack://web_meteo/./src/helpers/humidityParam.js","webpack://web_meteo/./src/helpers/windParam.js","webpack://web_meteo/./src/helpers/calcDayLength.js","webpack://web_meteo/./src/components/hourlyForecast.js","webpack://web_meteo/./src/components/dailyForecast.js","webpack://web_meteo/./src/api/geoData.js","webpack://web_meteo/./src/helpers/saveCityToLocalStorage.js","webpack://web_meteo/./src/helpers/capitalize.js","webpack://web_meteo/./src/helpers/currentTime.js","webpack://web_meteo/./src/components/geoLocation.js","webpack://web_meteo/./src/components/scrollToTop.js","webpack://web_meteo/./src/components/switchTheme.js","webpack://web_meteo/./src/init.js","webpack://web_meteo/./src/components/currentYear.js","webpack://web_meteo/./src/main.js"],"sourcesContent":["export const apiKey = \"cb63b0f8338542512b1cd6749d336304\";\r\n\r\nexport const baseUrl = \"https://api.openweathermap.org\";\r\n","import { getGeoData } from \"../api/geoData.js\";\r\nimport { cityInput } from \"./inputForm.js\";\r\n\r\nconst recentCitiesList = document.getElementById(\"recent-cities-list\");\r\n\r\ndocument.addEventListener(\"click\", (e) => {\r\n  if (e.target !== cityInput && e.target !== recentCitiesList) {\r\n    recentCitiesList.style.display = \"none\";\r\n  }\r\n});\r\n\r\nexport const showRecentCities = () => {\r\n  const cities = JSON.parse(localStorage.getItem(\"recentCities\")) || [];\r\n\r\n  if (cities.length === 0) return;\r\n\r\n  recentCitiesList.innerHTML = \"\";\r\n\r\n  cities.forEach((city) => {\r\n    const li = document.createElement(\"li\");\r\n    li.textContent = city;\r\n    li.addEventListener(\"click\", () => {\r\n      cityInput.value = city;\r\n      recentCitiesList.style.display = \"none\";\r\n      getGeoData(city);\r\n    });\r\n    recentCitiesList.append(li);\r\n  });\r\n\r\n  recentCitiesList.style.display = \"block\";\r\n};\r\n","import { getGeoData } from \"../api/geoData.js\";\r\nimport { showRecentCities } from \"./showRecentCities.js\";\r\n\r\nconst searchForm = document.querySelector(\".search-form\");\r\nexport const cityInput = document.querySelector(\".city-input\");\r\n\r\nexport function getWeatherByForm() {\r\n  searchForm.addEventListener(\"submit\", async (e) => {\r\n    e.preventDefault();\r\n    getGeoData(cityInput);\r\n  });\r\n\r\n  cityInput.addEventListener(\"focus\", () => {\r\n    showRecentCities();\r\n  });\r\n}\r\n","const errorMessage = document.getElementById(\"error-message\");\r\n\r\nexport function showError(message) {\r\n  errorMessage.textContent = message;\r\n}\r\n","import { showError } from \"../components/error.js\";\r\n\r\nconst cityInput = document.querySelector(\".city-input\");\r\n\r\nexport const isCyrillic = (text) => {\r\n  const cyrillicPattern = /^[А-Яа-яЁё\\s-]+$/;\r\n  return cyrillicPattern.test(text);\r\n};\r\n\r\ncityInput.addEventListener(\"input\", () => {\r\n  const inputValue = cityInput.value;\r\n\r\n  if (inputValue && !isCyrillic(inputValue)) {\r\n    showError(\"Введите на кириллице\");\r\n  } else {\r\n    showError(\"\");\r\n  }\r\n});\r\n","export const replaceAbbreviation = (city) => {\r\n  const lowerCaseCity = city.toLowerCase();\r\n\r\n  if (cityAbbreviations[lowerCaseCity]) {\r\n    return cityAbbreviations[lowerCaseCity];\r\n  }\r\n\r\n  return city;\r\n};\r\n\r\nconst cityAbbreviations = {\r\n  мск: \"Москва\",\r\n  спб: \"Санкт-Петербург\",\r\n  нск: \"Новосибирск\",\r\n};\r\n","import { apiKey, baseUrl } from \"./apiKeyAndHost.js\";\r\n\r\nconst fetchData = async (endpoint, lat, lon) => {\r\n  const url = new URL(`${baseUrl}/data/2.5/${endpoint}`);\r\n\r\n  const queryParams = new URLSearchParams({\r\n    lat: lat,\r\n    lon: lon,\r\n    appid: apiKey,\r\n    lang: \"ru\",\r\n    units: \"metric\",\r\n  });\r\n\r\n  url.search = queryParams.toString();\r\n\r\n  const response = await fetch(url);\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"Не удалось загрузить данные о погоде\");\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const getWeather = async (lat, lon) => {\r\n  return fetchData(\"weather\", lat, lon);\r\n};\r\n\r\nexport const getForecast = async (lat, lon) => {\r\n  return fetchData(\"forecast\", lat, lon);\r\n};\r\n","export function formatTime(unixTime, timezone) {\r\n  const localTime = unixTime + timezone;\r\n\r\n  const date = new Date(localTime * 1000);\r\n\r\n  const hours = date.getUTCHours();\r\n  const minutes = date.getUTCMinutes();\r\n\r\n  return `${hours}:${minutes < 10 ? \"0\" + minutes : minutes}`;\r\n}\r\n","export const calcSunPosition = (sunrise, sunset) => {\r\n  const now = Math.floor(Date.now() / 1000);\r\n  const totalDayLength = sunset - sunrise;\r\n  const elapsedTime = now - sunrise;\r\n\r\n  const percentage = elapsedTime / totalDayLength;\r\n  return percentage;\r\n};\r\n\r\nexport const updateSunPosition = (sunPosition) => {\r\n  const sun = document.querySelector(\".sun-graphic circle\");\r\n\r\n  if (sunPosition < 0 || sunPosition > 1) {\r\n    sun.setAttribute(\"visibility\", \"hidden\");\r\n    return;\r\n  }\r\n\r\n  sun.setAttribute(\"visibility\", \"visible\");\r\n\r\n  const startX = 20;\r\n  const endX = 180;\r\n  const horizonY = 35;\r\n  const arcRadius = 45;\r\n\r\n  const x = startX + sunPosition * (endX - startX);\r\n  const y = horizonY - Math.sin(sunPosition * Math.PI) * arcRadius;\r\n\r\n  sun.setAttribute(\"cx\", x);\r\n  sun.setAttribute(\"cy\", y);\r\n};\r\n","import { updateWindDirection } from \"../helpers/windParam.js\";\r\nimport { updateHumidityScale } from \"../helpers/humidityParam.js\";\r\nimport { formatTime } from \"../helpers/formatTime.js\";\r\nimport { calcDayLength } from \"../helpers/calcDayLength.js\";\r\nimport { updateSunPosition } from \"../helpers/calcSunPosition.js\";\r\nimport { calcSunPosition } from \"../helpers/calcSunPosition.js\";\r\n\r\nconst currentCity = document.querySelector(\".city\");\r\nconst currentTemp = document.querySelector(\".temperature\");\r\nconst feelsLike = document.querySelector(\".feels\");\r\nconst currentDescription = document.querySelector(\".description\");\r\nconst currentWeatherIcon = document.querySelector(\".weather-icon img\");\r\nconst currentWind = document.querySelector(\".wind\");\r\nconst currentVisibility = document.querySelector(\".visibility\");\r\nconst currentHumidity = document.querySelector(\".humidity\");\r\nconst currentPressure = document.querySelector(\".pressure\");\r\nconst sunriseItem = document.querySelector(\".sunrise\");\r\nconst sunsetItem = document.querySelector(\".sunset\");\r\nconst dayLength = document.querySelector(\".day-length\");\r\n\r\nexport const renderCurrentWeather = (data, city) => {\r\n  currentCity.textContent = city || \"Неизвестно\";\r\n  currentTemp.textContent = `${Math.round(data.main?.temp || 0)} °C`;\r\n  feelsLike.textContent = `Ощущается как ${Math.round(data.main?.feels_like || 0)}°C`;\r\n  currentDescription.textContent =\r\n    data.weather?.[0]?.description || \"Неизвестно\";\r\n  currentWeatherIcon.src = `https://openweathermap.org/img/wn/${\r\n    data.weather?.[0]?.icon || \"01d\"\r\n  }@2x.png`;\r\n  currentWind.textContent = `${Math.round(data.wind?.speed || 0)} м/с`;\r\n  const visibility = data.visibility || 0;\r\n  if (visibility > 1000) {\r\n    currentVisibility.textContent = `${(visibility / 1000).toFixed(1)} км`;\r\n  } else {\r\n    currentVisibility.textContent = `${visibility} м`;\r\n  }\r\n  currentHumidity.textContent = `${data.main?.humidity || 0}%`;\r\n  currentPressure.textContent = `${Math.round(\r\n    (data.main?.pressure || 0) * 0.750062,\r\n  )} мм рт.ст.`;\r\n\r\n  const windDegrees = data.wind?.deg || 0;\r\n  updateWindDirection(windDegrees);\r\n\r\n  const humidity = data.main?.humidity || 0;\r\n  updateHumidityScale(humidity);\r\n\r\n  const { sunrise, sunset } = data.sys || {};\r\n\r\n  const { timezone } = data || {};\r\n\r\n  sunriseItem.textContent = sunrise\r\n    ? formatTime(sunrise, timezone)\r\n    : \"Неизвестно\";\r\n  sunsetItem.textContent = sunset ? formatTime(sunset, timezone) : \"Неизвестно\";\r\n\r\n  dayLength.textContent = `Долгота дня: ${\r\n    sunrise && sunset ? calcDayLength(sunrise, sunset) : \"Неизвестно\"\r\n  }`;\r\n\r\n  const sunPosition = sunrise && sunset ? calcSunPosition(sunrise, sunset) : 0;\r\n  updateSunPosition(sunPosition);\r\n};\r\n","export const updateHumidityScale = (humidity) => {\r\n  const parameter = document.querySelector(\".parameter\");\r\n\r\n  parameter.style.width = `${humidity}%`;\r\n};\r\n","export function updateWindDirection(windDeg) {\r\n  const windIcon = document.getElementById(\"wind-direction-icon\");\r\n  const windText = document.getElementById(\"wind-direction-text\");\r\n\r\n  const iconRotation = (windDeg + 180) % 360;\r\n  windIcon.style.transform = `rotate(${iconRotation}deg)`;\r\n\r\n  const directions = [\"С\", \"СВ\", \"В\", \"ЮВ\", \"Ю\", \"ЮЗ\", \"З\", \"СЗ\"];\r\n  const normalizedDegrees = (windDeg + 360) % 360;\r\n  const index = Math.round(normalizedDegrees / 45) % 8;\r\n  windText.textContent = directions[index] || \"Н/Д\";\r\n}\r\n","export function calcDayLength(sunrise, sunset) {\r\n  const diffInSeconds = sunset - sunrise;\r\n  const hours = Math.floor(diffInSeconds / 3600);\r\n  const minutes = Math.floor((diffInSeconds % 3600) / 60);\r\n\r\n  return `${hours} час ${minutes} мин`;\r\n}\r\n","const hourlyForecast = document.querySelector(\".hourly-scroll\");\r\nimport { showError } from \"./error.js\";\r\n\r\nexport const renderHourlyForecast = (data) => {\r\n  hourlyForecast.innerHTML = \"\";\r\n\r\n  if (!data) {\r\n    showError(\"Данные о погоде недоступны\");\r\n  }\r\n\r\n  const currentDate = new Date();\r\n\r\n  currentDate.setHours(0, 0, 0, 0);\r\n\r\n  const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"];\r\n\r\n  const timezoneOffset = data.city.timezone * 1000;\r\n\r\n  data.list.forEach((item) => {\r\n    const date = new Date(item.dt * 1000 + timezoneOffset);\r\n    const hour = date.getHours();\r\n    const temp = Math.round(item.main.temp);\r\n    const icon = item.weather[0].icon;\r\n\r\n    const forecastDate = new Date(date);\r\n    forecastDate.setHours(0, 0, 0, 0);\r\n\r\n    const timeDiff = forecastDate.getTime() - currentDate.getTime();\r\n\r\n    const dayDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24));\r\n\r\n    let dayLabel;\r\n\r\n    if (dayDiff === 0) {\r\n      dayLabel = \"Сегодня\";\r\n    } else if (dayDiff === 1) {\r\n      dayLabel = \"Завтра\";\r\n    } else {\r\n      dayLabel = daysOfWeek[forecastDate.getDay()];\r\n    }\r\n\r\n    const hourlyItem = document.createElement(\"div\");\r\n    hourlyItem.classList.add(\"hourly-item\");\r\n    hourlyItem.innerHTML = `\r\n        <p class=\"hour\">${dayLabel}</p>\r\n        <p class=\"hour\">${hour}:00</p>\r\n        <img\r\n          src=\"https://openweathermap.org/img/wn/${icon}@4x.png\"\r\n          alt=\"Погода\"\r\n        />\r\n        <p class=\"temp\">${temp} °C</p>\r\n    `;\r\n    hourlyForecast.append(hourlyItem);\r\n  });\r\n};\r\n","const dailyForecast = document.querySelector(\".forecast-list\");\r\nimport { showError } from \"./error.js\";\r\n\r\nexport const renderDailyForecast = (data) => {\r\n  dailyForecast.innerHTML = \"\";\r\n\r\n  if (!data) {\r\n    showError(\"Данные о погоде недоступны\");\r\n  }\r\n\r\n  const groupedData = groupDataByDay(data.list);\r\n\r\n  Object.keys(groupedData)\r\n    .slice(0, 5)\r\n    .forEach((dayKey) => {\r\n      const dayData = groupedData[dayKey];\r\n      const maxTemp = Math.round(\r\n        Math.max(...dayData.map((item) => item.main.temp_max)),\r\n      );\r\n\r\n      const minTemp = Math.round(\r\n        Math.min(...dayData.map((item) => item.main.temp_min)),\r\n      );\r\n\r\n      const icon = dayData[0].weather[0].icon;\r\n\r\n      const date = new Date(dayData[0].dt * 1000);\r\n\r\n      const dayName = date.toLocaleDateString(\"ru-RU\", {\r\n        weekday: \"short\",\r\n      });\r\n\r\n      const dayNumber = date.getDate();\r\n\r\n      const monthName = date.toLocaleDateString(\"ru-RU\", {\r\n        month: \"short\",\r\n      });\r\n\r\n      const forecastItem = document.createElement(\"div\");\r\n      forecastItem.classList.add(\"forecast-item\");\r\n      forecastItem.innerHTML = `\r\n        <p class=\"day\">${dayName},</p>\r\n        <p class=\"day\">${dayNumber} ${monthName}</p>\r\n        <img\r\n        src=\"https://openweathermap.org/img/wn/${icon}@4x.png\"\r\n        alt=\"Погода\"\r\n        />\r\n        <div class=\"temp\">\r\n        <p class=\"temp-day\">${maxTemp} °C</p>\r\n        <p class=\"temp-night\">${minTemp} °C</p>\r\n        `;\r\n\r\n      dailyForecast.append(forecastItem);\r\n    });\r\n};\r\n\r\nconst groupDataByDay = (list) => {\r\n  const groupedData = {};\r\n\r\n  list.forEach((item) => {\r\n    const date = new Date(item.dt * 1000);\r\n    const dayKey = date.toLocaleDateString(\"ru-RU\");\r\n\r\n    if (!groupedData[dayKey]) {\r\n      groupedData[dayKey] = [];\r\n    }\r\n\r\n    groupedData[dayKey].push(item);\r\n  });\r\n\r\n  return groupedData;\r\n};\r\n","import { apiKey, baseUrl } from \"./apiKeyAndHost.js\";\r\nimport { cityInput } from \"../components/inputForm.js\";\r\nimport { showError } from \"../components/error.js\";\r\nimport { isCyrillic } from \"../helpers/checkCyrillic.js\";\r\nimport { replaceAbbreviation } from \"../helpers/cityAbbreviation.js\";\r\nimport { saveCityToLocalStorage } from \"../helpers/saveCityToLocalStorage.js\";\r\nimport { getWeather, getForecast } from \"./getWeatherAndForecast.js\";\r\nimport { renderCurrentWeather } from \"../components/currentWeather.js\";\r\nimport { renderHourlyForecast } from \"../components/hourlyForecast.js\";\r\nimport { renderDailyForecast } from \"../components/dailyForecast.js\";\r\n\r\nexport const getGeoData = async () => {\r\n  let city = cityInput.value.trim();\r\n\r\n  if (!city) {\r\n    return;\r\n  }\r\n  if (!isCyrillic(city)) {\r\n    showError(\"Проверьте название города\");\r\n    return;\r\n  }\r\n\r\n  city = replaceAbbreviation(city);\r\n\r\n  try {\r\n    const geoUrl = `${baseUrl}/geo/1.0/direct`;\r\n    const queryParams = new URLSearchParams({\r\n      q: city,\r\n      limit: 1,\r\n      appid: apiKey,\r\n    });\r\n\r\n    const geoResponse = await fetch(`${geoUrl}?${queryParams.toString()}`);\r\n\r\n    const geoData = await geoResponse.json();\r\n\r\n    if (!geoData.length) {\r\n      throw new Error(\"Город не найден\");\r\n    }\r\n\r\n    const { lat, lon } = geoData[0];\r\n\r\n    saveCityToLocalStorage(city);\r\n\r\n    const weatherData = await getWeather(lat, lon);\r\n    const forecastData = await getForecast(lat, lon);\r\n\r\n    renderCurrentWeather(weatherData, city);\r\n    renderHourlyForecast(forecastData);\r\n    renderDailyForecast(forecastData);\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    showError(\"Данные не получены\");\r\n  }\r\n};\r\n","import { capitalizeCity } from \"./capitalize.js\";\r\n\r\nexport const saveCityToLocalStorage = (city) => {\r\n  const capitalizedCity = capitalizeCity(city);\r\n  let cities = JSON.parse(localStorage.getItem(\"recentCities\")) || [];\r\n  if (!cities.includes(capitalizedCity)) {\r\n    cities.unshift(capitalizedCity);\r\n    if (cities.length > 5) {\r\n      cities.pop();\r\n    }\r\n    localStorage.setItem(\"recentCities\", JSON.stringify(cities));\r\n  }\r\n};\r\n","export const capitalizeCity = (city) => {\r\n  if (!city) return city;\r\n\r\n  const citiesWithHyphens = [\"Комсомольск-на-Амуре\", \"Ростов-на-Дону\"];\r\n\r\n  if (citiesWithHyphens.includes(city)) {\r\n    return city\r\n      .toLowerCase()\r\n      .split(/[\\s-]/)\r\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(\"-\");\r\n  }\r\n\r\n  return city\r\n    .toLowerCase()\r\n    .split(/[\\s-]/)\r\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(\" \");\r\n};\r\n","export const formatDate = (date) => {\r\n  const datePart = date.toLocaleDateString(\"ru\", {\r\n    weekday: \"short\",\r\n    day: \"numeric\",\r\n    month: \"short\",\r\n  });\r\n\r\n  const timePart = date.toLocaleTimeString(\"ru\", {\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n  });\r\n\r\n  return `${datePart}, ${timePart}`;\r\n};\r\n\r\nexport const renderCurrentTime = () => {\r\n  const nowElement = document.querySelector(\".now\");\r\n  const currentTime = new Date();\r\n\r\n  const formattedTime = formatDate(currentTime);\r\n  nowElement.textContent = `Сейчас: ${formattedTime}`;\r\n};\r\n\r\nsetInterval(renderCurrentTime, 60000);\r\n","import { apiKey, baseUrl } from \"../api/apiKeyAndHost.js\";\r\nimport { showError } from \"./error.js\";\r\nimport { getWeather, getForecast } from \"../api/getWeatherAndForecast.js\";\r\nimport { renderCurrentWeather } from \"./currentWeather.js\";\r\nimport { renderHourlyForecast } from \"./hourlyForecast.js\";\r\nimport { renderDailyForecast } from \"./dailyForecast.js\";\r\n\r\nexport function geoLocation() {\r\n  document.addEventListener(\"DOMContentLoaded\", async () => {\r\n    try {\r\n      const { latitude, longitude } = await getBrowserGeolocation();\r\n      const locationName = await geoLocationName(latitude, longitude);\r\n      await fetchWeatherByCoords(latitude, longitude, locationName);\r\n    } catch (error) {\r\n      console.error(\"Ошибка при получении геолокации: \", error.message);\r\n      showError(\r\n        \"Не удалось определить Ваше местоположение. Пожалуйста, введите город вручную\",\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\nconst getBrowserGeolocation = () => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!navigator.geolocation) {\r\n      reject(new Error(\"Геолокация не поддерживается Вашим браузером\"));\r\n    } else {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          resolve({ latitude, longitude });\r\n        },\r\n        (error) => {\r\n          reject(error);\r\n        },\r\n      );\r\n    }\r\n  });\r\n};\r\n\r\nconst geoLocationName = async (latitude, longitude) => {\r\n  const reverseGeocodingUrl = new URL(`${baseUrl}/geo/1.0/reverse`);\r\n\r\n  const queryParams = new URLSearchParams({\r\n    lat: latitude,\r\n    lon: longitude,\r\n    limit: 1,\r\n    appid: apiKey,\r\n  });\r\n\r\n  const url = `${reverseGeocodingUrl}?${queryParams.toString()}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    if (data && data.length > 0) {\r\n      // eslint-disable-next-line camelcase\r\n      const { local_names } = data[0];\r\n      // eslint-disable-next-line camelcase\r\n      const russianName = local_names?.ru || data[0].name;\r\n      return `${russianName}`;\r\n    } else {\r\n      throw new Error(\"Название места не найдено\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Ошибка при получении названия места: \", error.message);\r\n    showError(\"Ошибка при получении названия места\");\r\n  }\r\n};\r\n\r\nconst fetchWeatherByCoords = async (latitude, longitude, locationName) => {\r\n  try {\r\n    const weatherData = await getWeather(latitude, longitude);\r\n    const forecastData = await getForecast(latitude, longitude);\r\n\r\n    renderCurrentWeather(weatherData, locationName);\r\n    renderHourlyForecast(forecastData);\r\n    renderDailyForecast(forecastData);\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    showError(\r\n      \"Не удалось получить данные о погоде. Пожалуйста, попробуйте позже\",\r\n    );\r\n  }\r\n};\r\n","const scrollToTopBtn = document.getElementById(\"toTop\");\r\n\r\nscrollToTopBtn.addEventListener(\"click\", scrollToTop);\r\n\r\nexport function scrollToTop() {\r\n  window.scrollTo({\r\n    top: 0,\r\n    behavior: \"smooth\",\r\n  });\r\n}\r\n\r\nwindow.addEventListener(\"scroll\", () => {\r\n  if (window.scrollY > 300) {\r\n    scrollToTopBtn.style.display = \"block\";\r\n  } else {\r\n    scrollToTopBtn.style.display = \"none\";\r\n  }\r\n});\r\n","export function switchTheme() {\r\n  const themeSwitch = document.getElementById(\"themeSwitch\");\r\n  let userHasChosenTheme = false;\r\n\r\n  themeSwitch.addEventListener(\"change\", toggleTheme);\r\n\r\n  function toggleTheme() {\r\n    const currentTheme = document.documentElement.getAttribute(\"data-theme\");\r\n\r\n    let newTheme;\r\n    if (currentTheme === \"dark\") {\r\n      newTheme = \"light\";\r\n    } else {\r\n      newTheme = \"dark\";\r\n    }\r\n\r\n    userHasChosenTheme = true;\r\n\r\n    setTheme(newTheme);\r\n  }\r\n\r\n  function setTheme(theme) {\r\n    document.documentElement.setAttribute(\"data-theme\", theme);\r\n    if (userHasChosenTheme) {\r\n      localStorage.setItem(\"theme\", theme);\r\n    }\r\n  }\r\n\r\n  const savedTheme = localStorage.getItem(\"theme\");\r\n\r\n  if (savedTheme) {\r\n    setTheme(savedTheme);\r\n  } else {\r\n    const themeByBrowser = getThemeByBrowserSetting();\r\n    if (themeByBrowser === \"dark\") {\r\n      setTheme(\"dark\");\r\n    } else {\r\n      const themeByTime = getThemeByTime();\r\n      setTheme(themeByTime);\r\n    }\r\n  }\r\n\r\n  function getThemeByTime() {\r\n    const now = new Date();\r\n    const hours = now.getHours();\r\n    return hours >= 7 && hours < 22 ? \"light\" : \"dark\";\r\n  }\r\n}\r\n\r\nfunction getThemeByBrowserSetting() {\r\n  if (\r\n    window.matchMedia &&\r\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches\r\n  ) {\r\n    return \"dark\";\r\n  } else {\r\n    return \"light\";\r\n  }\r\n}\r\n","import { switchTheme } from \"./components/switchTheme.js\";\r\nimport { getGeoData } from \"./api/geoData.js\";\r\nimport { getWeatherByForm } from \"./components/inputForm.js\";\r\nimport { renderCurrentTime } from \"./helpers/currentTime.js\";\r\nimport { geoLocation } from \"./components/geoLocation.js\";\r\nimport { scrollToTop } from \"./components/scrollToTop.js\";\r\nimport { getCurrentYear } from \"./components/currentYear.js\";\r\n\r\nexport function initApp() {\r\n  switchTheme();\r\n  getGeoData();\r\n  getWeatherByForm();\r\n  renderCurrentTime();\r\n  geoLocation();\r\n  scrollToTop();\r\n  getCurrentYear();\r\n}\r\n","export function getCurrentYear() {\r\n  const currentYear = new Date().getFullYear();\r\n  const yearElement = document.getElementById(\"currentYear\");\r\n  yearElement.textContent = currentYear;\r\n}\r\n","import \"./styles/main.css\";\r\n\r\nimport { initApp } from \"./init.js\";\r\n\r\ninitApp();\r\n\r\nfunction causeRuntimeError() {\r\n  const obj = { key: \"value\" };\r\n  console.log(obj.undefinedProperty.someValue);\r\n}\r\n\r\ncauseRuntimeError();\r\n"],"names":["apiKey","baseUrl","recentCitiesList","document","getElementById","addEventListener","e","target","cityInput","style","display","searchForm","querySelector","errorMessage","showError","message","textContent","isCyrillic","text","test","inputValue","value","cityAbbreviations","fetchData","async","endpoint","lat","lon","url","URL","queryParams","URLSearchParams","appid","lang","units","search","toString","response","fetch","ok","Error","json","getWeather","getForecast","formatTime","unixTime","timezone","date","Date","hours","getUTCHours","minutes","getUTCMinutes","currentCity","currentTemp","feelsLike","currentDescription","currentWeatherIcon","currentWind","currentVisibility","currentHumidity","currentPressure","sunriseItem","sunsetItem","dayLength","renderCurrentWeather","data","city","Math","round","main","temp","feels_like","weather","description","src","icon","wind","speed","visibility","humidity","toFixed","pressure","windDeg","windIcon","windText","iconRotation","transform","normalizedDegrees","index","updateWindDirection","deg","width","sunrise","sunset","sys","diffInSeconds","floor","calcDayLength","sunPosition","now","calcSunPosition","sun","setAttribute","x","y","sin","PI","updateSunPosition","hourlyForecast","renderHourlyForecast","innerHTML","currentDate","setHours","daysOfWeek","timezoneOffset","list","forEach","item","dt","hour","getHours","forecastDate","timeDiff","getTime","dayDiff","dayLabel","getDay","hourlyItem","createElement","classList","add","append","dailyForecast","renderDailyForecast","groupedData","groupDataByDay","Object","keys","slice","dayKey","dayData","maxTemp","max","map","temp_max","minTemp","min","temp_min","dayName","toLocaleDateString","weekday","dayNumber","getDate","monthName","month","forecastItem","push","getGeoData","trim","lowerCaseCity","toLowerCase","replaceAbbreviation","geoUrl","q","limit","geoResponse","geoData","length","capitalizedCity","includes","split","word","charAt","toUpperCase","join","capitalizeCity","cities","JSON","parse","localStorage","getItem","unshift","pop","setItem","stringify","saveCityToLocalStorage","weatherData","forecastData","error","console","renderCurrentTime","nowElement","formattedTime","day","toLocaleTimeString","minute","setInterval","scrollToTopBtn","scrollToTop","window","scrollTo","top","behavior","scrollY","themeSwitch","userHasChosenTheme","setTheme","theme","documentElement","newTheme","getAttribute","savedTheme","matchMedia","matches","getThemeByTime","switchTheme","preventDefault","li","showRecentCities","latitude","longitude","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","locationName","local_names","ru","name","geoLocationName","fetchWeatherByCoords","currentYear","getFullYear","getCurrentYear","log","key","undefinedProperty","someValue"],"sourceRoot":""}