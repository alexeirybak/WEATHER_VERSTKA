{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;ACAO;AACP;AACO;;;;;;;;;;;;;;;;;;;;;;;;;ACF8C;AACE;AACJ;AACM;AACY;AACS;AACT;AACE;AACA;AACF;AACrE;AACO;AACP,aAAa,+DAAS;AACtB;AACA;AACA;AACA;AACA,OAAO,qEAAU;AACjB,IAAI,+DAAS;AACb;AACA;AACA;AACA,SAAS,iFAAmB;AAC5B;AACA;AACA,sBAAsB,sDAAO,CAAC;AAC9B;AACA;AACA;AACA,aAAa,qDAAM;AACnB,KAAK;AACL;AACA,uCAAuC,OAAO,GAAG,uBAAuB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,WAAW;AACvB;AACA,IAAI,0FAAsB;AAC1B;AACA,8BAA8B,qEAAU;AACxC,+BAA+B,sEAAW;AAC1C;AACA,IAAI,mFAAoB;AACxB,IAAI,mFAAoB;AACxB,IAAI,iFAAmB;AACvB,IAAI;AACJ;AACA,IAAI,+DAAS;AACb;AACA;;;;;;;;;;;;;;;;;ACtDqD;AACrD;AACA;AACA,yBAAyB,sDAAO,CAAC,YAAY,SAAS;AACtD;AACA;AACA;AACA;AACA,WAAW,qDAAM;AACjB;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;;;;;;;;;;;;;;;;;;;;AC9B8D;AACI;AACZ;AACM;AACM;AACF;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,+BAA+B,kCAAkC;AACjE,2CAA2C,uCAAuC;AAClF;AACA;AACA;AACA;AACA,GAAG;AACH,+BAA+B,mCAAmC;AAClE;AACA;AACA,uCAAuC,gCAAgC;AACvE,IAAI;AACJ,uCAAuC,YAAY;AACnD;AACA,mCAAmC,yBAAyB;AAC5D,mCAAmC;AACnC;AACA,KAAK;AACL;AACA;AACA,EAAE,0EAAmB;AACrB;AACA;AACA,EAAE,8EAAmB;AACrB;AACA,UAAU,kBAAkB;AAC5B;AACA,UAAU,WAAW;AACrB;AACA;AACA,MAAM,kEAAU;AAChB;AACA,oCAAoC,kEAAU;AAC9C;AACA;AACA,wBAAwB,wEAAa;AACrC,GAAG;AACH;AACA,0CAA0C,4EAAe;AACzD,EAAE,8EAAiB;AACnB;;;;;;;;;;;;;;;AC9DO;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACJA;AACuC;AACvC;AACO;AACP;AACA;AACA;AACA,IAAI,oDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,yBAAyB,QAAQ;AACjC,yBAAyB,WAAW,EAAE,UAAU;AAChD;AACA,iDAAiD,KAAK;AACtD;AACA;AACA;AACA,8BAA8B,SAAS;AACvC,gCAAgC,SAAS;AACzC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;;;;;;;;;;;;;;ACvEA;AACA;AACO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;ACJ0D;AACnB;AACmC;AACf;AACA;AACF;AACzD;AACO;AACP;AACA;AACA,cAAc,sBAAsB;AACpC;AACA;AACA,MAAM;AACN;AACA,MAAM,oDAAS;AACf;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA,kBAAkB,sBAAsB;AACxC,oBAAoB,qBAAqB;AACzC,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,yCAAyC,0DAAO,CAAC;AACjD;AACA;AACA;AACA;AACA;AACA,WAAW,yDAAM;AACjB,GAAG;AACH;AACA,iBAAiB,oBAAoB,GAAG,uBAAuB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA,gBAAgB,YAAY;AAC5B,MAAM;AACN;AACA;AACA,IAAI;AACJ;AACA,IAAI,oDAAS;AACb;AACA;AACA;AACA;AACA;AACA,8BAA8B,yEAAU;AACxC,+BAA+B,0EAAW;AAC1C;AACA,IAAI,wEAAoB;AACxB,IAAI,wEAAoB;AACxB,IAAI,sEAAmB;AACvB,IAAI;AACJ;AACA,IAAI,oDAAS;AACb;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrFA;AACuC;AACvC;AACO;AACP;AACA;AACA;AACA,IAAI,oDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS;AACnC,0BAA0B,KAAK;AAC/B;AACA,mDAAmD,KAAK;AACxD;AACA;AACA,0BAA0B,MAAM;AAChC;AACA;AACA,GAAG;AACH;;;;;;;;;;;;;;;;;;ACtD+C;AACU;AACzD;AACA;AACO;AACP;AACO;AACP;AACA;AACA,IAAI,2DAAU;AACd,GAAG;AACH;AACA;AACA,IAAI,sEAAgB;AACpB,GAAG;AACH;;;;;;;;;;;;;;;ACfA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;ACjB8C;AACJ;AAC3C;AACA;AACA;AACA;AACA,mBAAmB,oDAAS;AAC5B;AACA;AACA,CAAC;AACD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,oDAAS;AACf;AACA,MAAM,2DAAU;AAChB,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;;;;;;;;;;;;;;;AC9BO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;;;;;;;;;;;;;;AC1DO;AACP;AACA;AACA;AACA;AACA,YAAY,OAAO,MAAM,SAAS;AAClC;;;;;;;;;;;;;;;;ACNO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC7BO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AClBmD;AACnD;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,+DAAS;AACb,IAAI;AACJ,IAAI,+DAAS;AACb;AACA,CAAC;;;;;;;;;;;;;;;ACjBM;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACdO;AACP;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,YAAY,SAAS,IAAI,SAAS;AAClC;AACA;AACO;AACP;AACA;AACA;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;AACA;;;;;;;;;;;;;;;ACvBO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM,GAAG,uCAAuC;AAC5D;;;;;;;;;;;;;;;ACTO;AACP;AACA;AACA,6BAA6B,SAAS;AACtC;;;;;;;;;;;;;;;;ACJiD;AACjD;AACO;AACP,0BAA0B,8DAAc;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACZO;AACP;AACA;AACA;AACA;AACA,uCAAuC,aAAa;AACpD;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACX0D;AACZ;AACe;AACA;AACH;AACA;AACG;AAC7D;AACO;AACP,EAAE,uEAAW;AACb,EAAE,2DAAU;AACZ,EAAE,0EAAgB;AAClB,EAAE,0EAAiB;AACnB,EAAE,uEAAW;AACb,EAAE,uEAAW;AACb,EAAE,0EAAc;AAChB;;;;;;;UChBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN2B;AAC3B;AACoC;AACpC;AACA,iDAAO;AACP;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA","sources":["webpack://web_meteo/./src/styles/main.css?5846","webpack://web_meteo/./src/api/apiKeyAndHost.js","webpack://web_meteo/./src/api/geoData.js","webpack://web_meteo/./src/api/getWeatherAndForecast.js","webpack://web_meteo/./src/components/currentWeather.js","webpack://web_meteo/./src/components/currentYear.js","webpack://web_meteo/./src/components/dailyForecast.js","webpack://web_meteo/./src/components/error.js","webpack://web_meteo/./src/components/geoLocation.js","webpack://web_meteo/./src/components/hourlyForecast.js","webpack://web_meteo/./src/components/inputForm.js","webpack://web_meteo/./src/components/scrollToTop.js","webpack://web_meteo/./src/components/showRecentCities.js","webpack://web_meteo/./src/components/switchTheme.js","webpack://web_meteo/./src/helpers/calcDayLength.js","webpack://web_meteo/./src/helpers/calcSunPosition.js","webpack://web_meteo/./src/helpers/capitalize.js","webpack://web_meteo/./src/helpers/checkCyrillic.js","webpack://web_meteo/./src/helpers/cityAbbreviation.js","webpack://web_meteo/./src/helpers/currentTime.js","webpack://web_meteo/./src/helpers/formatTime.js","webpack://web_meteo/./src/helpers/humidityParam.js","webpack://web_meteo/./src/helpers/saveCityToLocalStorage.js","webpack://web_meteo/./src/helpers/windParam.js","webpack://web_meteo/./src/init.js","webpack://web_meteo/webpack/bootstrap","webpack://web_meteo/webpack/runtime/define property getters","webpack://web_meteo/webpack/runtime/hasOwnProperty shorthand","webpack://web_meteo/webpack/runtime/make namespace object","webpack://web_meteo/./src/main.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","export const apiKey = \"cb63b0f8338542512b1cd6749d336304\";\r\n\r\nexport const baseUrl = \"https://api.openweathermap.org\";\r\n","import { apiKey, baseUrl } from \"./apiKeyAndHost.js\";\r\nimport { cityInput } from \"../components/inputForm.js\";\r\nimport { showError } from \"../components/error.js\";\r\nimport { isCyrillic } from \"../helpers/checkCyrillic.js\";\r\nimport { replaceAbbreviation } from \"../helpers/cityAbbreviation.js\";\r\nimport { saveCityToLocalStorage } from \"../helpers/saveCityToLocalStorage.js\";\r\nimport { getWeather, getForecast } from \"./getWeatherAndForecast.js\";\r\nimport { renderCurrentWeather } from \"../components/currentWeather.js\";\r\nimport { renderHourlyForecast } from \"../components/hourlyForecast.js\";\r\nimport { renderDailyForecast } from \"../components/dailyForecast.js\";\r\n\r\nexport const getGeoData = async () => {\r\n  let city = cityInput.value.trim();\r\n\r\n  if (!city) {\r\n    return;\r\n  }\r\n  if (!isCyrillic(city)) {\r\n    showError(\"Проверьте название города\");\r\n    return;\r\n  }\r\n\r\n  city = replaceAbbreviation(city);\r\n\r\n  try {\r\n    const geoUrl = `${baseUrl}/geo/1.0/direct`;\r\n    const queryParams = new URLSearchParams({\r\n      q: city,\r\n      limit: 1,\r\n      appid: apiKey,\r\n    });\r\n\r\n    const geoResponse = await fetch(`${geoUrl}?${queryParams.toString()}`);\r\n\r\n    const geoData = await geoResponse.json();\r\n\r\n    if (!geoData.length) {\r\n      throw new Error(\"Город не найден\");\r\n    }\r\n\r\n    const { lat, lon } = geoData[0];\r\n\r\n    saveCityToLocalStorage(city);\r\n\r\n    const weatherData = await getWeather(lat, lon);\r\n    const forecastData = await getForecast(lat, lon);\r\n\r\n    renderCurrentWeather(weatherData, city);\r\n    renderHourlyForecast(forecastData);\r\n    renderDailyForecast(forecastData);\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    showError(\"Данные не получены\");\r\n  }\r\n};\r\n","import { apiKey, baseUrl } from \"./apiKeyAndHost.js\";\r\n\r\nconst fetchData = async (endpoint, lat, lon) => {\r\n  const url = new URL(`${baseUrl}/data/2.5/${endpoint}`);\r\n\r\n  const queryParams = new URLSearchParams({\r\n    lat: lat,\r\n    lon: lon,\r\n    appid: apiKey,\r\n    lang: \"ru\",\r\n    units: \"metric\",\r\n  });\r\n\r\n  url.search = queryParams.toString();\r\n\r\n  const response = await fetch(url);\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"Не удалось загрузить данные о погоде\");\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nexport const getWeather = async (lat, lon) => {\r\n  return fetchData(\"weather\", lat, lon);\r\n};\r\n\r\nexport const getForecast = async (lat, lon) => {\r\n  return fetchData(\"forecast\", lat, lon);\r\n};\r\n","import { updateWindDirection } from \"../helpers/windParam.js\";\r\nimport { updateHumidityScale } from \"../helpers/humidityParam.js\";\r\nimport { formatTime } from \"../helpers/formatTime.js\";\r\nimport { calcDayLength } from \"../helpers/calcDayLength.js\";\r\nimport { updateSunPosition } from \"../helpers/calcSunPosition.js\";\r\nimport { calcSunPosition } from \"../helpers/calcSunPosition.js\";\r\n\r\nconst currentCity = document.querySelector(\".city\");\r\nconst currentTemp = document.querySelector(\".temperature\");\r\nconst feelsLike = document.querySelector(\".feels\");\r\nconst currentDescription = document.querySelector(\".description\");\r\nconst currentWeatherIcon = document.querySelector(\".weather-icon img\");\r\nconst currentWind = document.querySelector(\".wind\");\r\nconst currentVisibility = document.querySelector(\".visibility\");\r\nconst currentHumidity = document.querySelector(\".humidity\");\r\nconst currentPressure = document.querySelector(\".pressure\");\r\nconst sunriseItem = document.querySelector(\".sunrise\");\r\nconst sunsetItem = document.querySelector(\".sunset\");\r\nconst dayLength = document.querySelector(\".day-length\");\r\n\r\nexport const renderCurrentWeather = (data, city) => {\r\n  currentCity.textContent = city || \"Неизвестно\";\r\n  currentTemp.textContent = `${Math.round(data.main?.temp || 0)} °C`;\r\n  feelsLike.textContent = `Ощущается как ${Math.round(data.main?.feels_like || 0)}°C`;\r\n  currentDescription.textContent =\r\n    data.weather?.[0]?.description || \"Неизвестно\";\r\n  currentWeatherIcon.src = `https://openweathermap.org/img/wn/${\r\n    data.weather?.[0]?.icon || \"01d\"\r\n  }@2x.png`;\r\n  currentWind.textContent = `${Math.round(data.wind?.speed || 0)} м/с`;\r\n  const visibility = data.visibility || 0;\r\n  if (visibility > 1000) {\r\n    currentVisibility.textContent = `${(visibility / 1000).toFixed(1)} км`;\r\n  } else {\r\n    currentVisibility.textContent = `${visibility} м`;\r\n  }\r\n  currentHumidity.textContent = `${data.main?.humidity || 0}%`;\r\n  currentPressure.textContent = `${Math.round(\r\n    (data.main?.pressure || 0) * 0.750062,\r\n  )} мм рт.ст.`;\r\n\r\n  const windDegrees = data.wind?.deg || 0;\r\n  updateWindDirection(windDegrees);\r\n\r\n  const humidity = data.main?.humidity || 0;\r\n  updateHumidityScale(humidity);\r\n\r\n  const { sunrise, sunset } = data.sys || {};\r\n\r\n  const { timezone } = data || {};\r\n\r\n  sunriseItem.textContent = sunrise\r\n    ? formatTime(sunrise, timezone)\r\n    : \"Неизвестно\";\r\n  sunsetItem.textContent = sunset ? formatTime(sunset, timezone) : \"Неизвестно\";\r\n\r\n  dayLength.textContent = `Долгота дня: ${\r\n    sunrise && sunset ? calcDayLength(sunrise, sunset) : \"Неизвестно\"\r\n  }`;\r\n\r\n  const sunPosition = sunrise && sunset ? calcSunPosition(sunrise, sunset) : 0;\r\n  updateSunPosition(sunPosition);\r\n};\r\n","export function getCurrentYear() {\r\n  const currentYear = new Date().getFullYear();\r\n  const yearElement = document.getElementById(\"currentYear\");\r\n  yearElement.textContent = currentYear;\r\n}\r\n","const dailyForecast = document.querySelector(\".forecast-list\");\r\nimport { showError } from \"./error.js\";\r\n\r\nexport const renderDailyForecast = (data) => {\r\n  dailyForecast.innerHTML = \"\";\r\n\r\n  if (!data) {\r\n    showError(\"Данные о погоде недоступны\");\r\n  }\r\n\r\n  const groupedData = groupDataByDay(data.list);\r\n\r\n  Object.keys(groupedData)\r\n    .slice(0, 5)\r\n    .forEach((dayKey) => {\r\n      const dayData = groupedData[dayKey];\r\n      const maxTemp = Math.round(\r\n        Math.max(...dayData.map((item) => item.main.temp_max)),\r\n      );\r\n\r\n      const minTemp = Math.round(\r\n        Math.min(...dayData.map((item) => item.main.temp_min)),\r\n      );\r\n\r\n      const icon = dayData[0].weather[0].icon;\r\n\r\n      const date = new Date(dayData[0].dt * 1000);\r\n\r\n      const dayName = date.toLocaleDateString(\"ru-RU\", {\r\n        weekday: \"short\",\r\n      });\r\n\r\n      const dayNumber = date.getDate();\r\n\r\n      const monthName = date.toLocaleDateString(\"ru-RU\", {\r\n        month: \"short\",\r\n      });\r\n\r\n      const forecastItem = document.createElement(\"div\");\r\n      forecastItem.classList.add(\"forecast-item\");\r\n      forecastItem.innerHTML = `\r\n        <p class=\"day\">${dayName},</p>\r\n        <p class=\"day\">${dayNumber} ${monthName}</p>\r\n        <img\r\n        src=\"https://openweathermap.org/img/wn/${icon}@4x.png\"\r\n        alt=\"Погода\"\r\n        />\r\n        <div class=\"temp\">\r\n        <p class=\"temp-day\">${maxTemp} °C</p>\r\n        <p class=\"temp-night\">${minTemp} °C</p>\r\n        `;\r\n\r\n      dailyForecast.append(forecastItem);\r\n    });\r\n};\r\n\r\nconst groupDataByDay = (list) => {\r\n  const groupedData = {};\r\n\r\n  list.forEach((item) => {\r\n    const date = new Date(item.dt * 1000);\r\n    const dayKey = date.toLocaleDateString(\"ru-RU\");\r\n\r\n    if (!groupedData[dayKey]) {\r\n      groupedData[dayKey] = [];\r\n    }\r\n\r\n    groupedData[dayKey].push(item);\r\n  });\r\n\r\n  return groupedData;\r\n};\r\n","const errorMessage = document.getElementById(\"error-message\");\r\n\r\nexport function showError(message) {\r\n  errorMessage.textContent = message;\r\n}\r\n","import { apiKey, baseUrl } from \"../api/apiKeyAndHost.js\";\r\nimport { showError } from \"./error.js\";\r\nimport { getWeather, getForecast } from \"../api/getWeatherAndForecast.js\";\r\nimport { renderCurrentWeather } from \"./currentWeather.js\";\r\nimport { renderHourlyForecast } from \"./hourlyForecast.js\";\r\nimport { renderDailyForecast } from \"./dailyForecast.js\";\r\n\r\nexport function geoLocation() {\r\n  document.addEventListener(\"DOMContentLoaded\", async () => {\r\n    try {\r\n      const { latitude, longitude } = await getBrowserGeolocation();\r\n      const locationName = await geoLocationName(latitude, longitude);\r\n      await fetchWeatherByCoords(latitude, longitude, locationName);\r\n    } catch (error) {\r\n      console.error(\"Ошибка при получении геолокации: \", error.message);\r\n      showError(\r\n        \"Не удалось определить Ваше местоположение. Пожалуйста, введите город вручную\",\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\nconst getBrowserGeolocation = () => {\r\n  return new Promise((resolve, reject) => {\r\n    if (!navigator.geolocation) {\r\n      reject(new Error(\"Геолокация не поддерживается Вашим браузером\"));\r\n    } else {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const { latitude, longitude } = position.coords;\r\n          resolve({ latitude, longitude });\r\n        },\r\n        (error) => {\r\n          reject(error);\r\n        },\r\n      );\r\n    }\r\n  });\r\n};\r\n\r\nconst geoLocationName = async (latitude, longitude) => {\r\n  const reverseGeocodingUrl = new URL(`${baseUrl}/geo/1.0/reverse`);\r\n\r\n  const queryParams = new URLSearchParams({\r\n    lat: latitude,\r\n    lon: longitude,\r\n    limit: 1,\r\n    appid: apiKey,\r\n  });\r\n\r\n  const url = `${reverseGeocodingUrl}?${queryParams.toString()}`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    if (data && data.length > 0) {\r\n      // eslint-disable-next-line camelcase\r\n      const { local_names } = data[0];\r\n      // eslint-disable-next-line camelcase\r\n      const russianName = local_names?.ru || data[0].name;\r\n      return `${russianName}`;\r\n    } else {\r\n      throw new Error(\"Название места не найдено\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Ошибка при получении названия места: \", error.message);\r\n    showError(\"Ошибка при получении названия места\");\r\n  }\r\n};\r\n\r\nconst fetchWeatherByCoords = async (latitude, longitude, locationName) => {\r\n  try {\r\n    const weatherData = await getWeather(latitude, longitude);\r\n    const forecastData = await getForecast(latitude, longitude);\r\n\r\n    renderCurrentWeather(weatherData, locationName);\r\n    renderHourlyForecast(forecastData);\r\n    renderDailyForecast(forecastData);\r\n  } catch (error) {\r\n    console.error(error.message);\r\n    showError(\r\n      \"Не удалось получить данные о погоде. Пожалуйста, попробуйте позже\",\r\n    );\r\n  }\r\n};\r\n","const hourlyForecast = document.querySelector(\".hourly-scroll\");\r\nimport { showError } from \"./error.js\";\r\n\r\nexport const renderHourlyForecast = (data) => {\r\n  hourlyForecast.innerHTML = \"\";\r\n\r\n  if (!data) {\r\n    showError(\"Данные о погоде недоступны\");\r\n  }\r\n\r\n  const currentDate = new Date();\r\n\r\n  currentDate.setHours(0, 0, 0, 0);\r\n\r\n  const daysOfWeek = [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"];\r\n\r\n  const timezoneOffset = data.city.timezone * 1000;\r\n\r\n  data.list.forEach((item) => {\r\n    const date = new Date(item.dt * 1000 + timezoneOffset);\r\n    const hour = date.getHours();\r\n    const temp = Math.round(item.main.temp);\r\n    const icon = item.weather[0].icon;\r\n\r\n    const forecastDate = new Date(date);\r\n    forecastDate.setHours(0, 0, 0, 0);\r\n\r\n    const timeDiff = forecastDate.getTime() - currentDate.getTime();\r\n\r\n    const dayDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24));\r\n\r\n    let dayLabel;\r\n\r\n    if (dayDiff === 0) {\r\n      dayLabel = \"Сегодня\";\r\n    } else if (dayDiff === 1) {\r\n      dayLabel = \"Завтра\";\r\n    } else {\r\n      dayLabel = daysOfWeek[forecastDate.getDay()];\r\n    }\r\n\r\n    const hourlyItem = document.createElement(\"div\");\r\n    hourlyItem.classList.add(\"hourly-item\");\r\n    hourlyItem.innerHTML = `\r\n        <p class=\"hour\">${dayLabel}</p>\r\n        <p class=\"hour\">${hour}:00</p>\r\n        <img\r\n          src=\"https://openweathermap.org/img/wn/${icon}@4x.png\"\r\n          alt=\"Погода\"\r\n        />\r\n        <p class=\"temp\">${temp} °C</p>\r\n    `;\r\n    hourlyForecast.append(hourlyItem);\r\n  });\r\n};\r\n","import { getGeoData } from \"../api/geoData.js\";\r\nimport { showRecentCities } from \"./showRecentCities.js\";\r\n\r\nconst searchForm = document.querySelector(\".search-form\");\r\nexport const cityInput = document.querySelector(\".city-input\");\r\n\r\nexport function getWeatherByForm() {\r\n  searchForm.addEventListener(\"submit\", async (e) => {\r\n    e.preventDefault();\r\n    getGeoData(cityInput);\r\n  });\r\n\r\n  cityInput.addEventListener(\"focus\", () => {\r\n    showRecentCities();\r\n  });\r\n}\r\n","const scrollToTopBtn = document.getElementById(\"toTop\");\r\n\r\nscrollToTopBtn.addEventListener(\"click\", scrollToTop);\r\n\r\nexport function scrollToTop() {\r\n  window.scrollTo({\r\n    top: 0,\r\n    behavior: \"smooth\",\r\n  });\r\n}\r\n\r\nwindow.addEventListener(\"scroll\", () => {\r\n  if (window.scrollY > 300) {\r\n    scrollToTopBtn.style.display = \"block\";\r\n  } else {\r\n    scrollToTopBtn.style.display = \"none\";\r\n  }\r\n});\r\n","import { getGeoData } from \"../api/geoData.js\";\r\nimport { cityInput } from \"./inputForm.js\";\r\n\r\nconst recentCitiesList = document.getElementById(\"recent-cities-list\");\r\n\r\ndocument.addEventListener(\"click\", (e) => {\r\n  if (e.target !== cityInput && e.target !== recentCitiesList) {\r\n    recentCitiesList.style.display = \"none\";\r\n  }\r\n});\r\n\r\nexport const showRecentCities = () => {\r\n  const cities = JSON.parse(localStorage.getItem(\"recentCities\")) || [];\r\n\r\n  if (cities.length === 0) return;\r\n\r\n  recentCitiesList.innerHTML = \"\";\r\n\r\n  cities.forEach((city) => {\r\n    const li = document.createElement(\"li\");\r\n    li.textContent = city;\r\n    li.addEventListener(\"click\", () => {\r\n      cityInput.value = city;\r\n      recentCitiesList.style.display = \"none\";\r\n      getGeoData(city);\r\n    });\r\n    recentCitiesList.append(li);\r\n  });\r\n\r\n  recentCitiesList.style.display = \"block\";\r\n};\r\n","export function switchTheme() {\r\n  const themeSwitch = document.getElementById(\"themeSwitch\");\r\n  let userHasChosenTheme = false;\r\n\r\n  themeSwitch.addEventListener(\"change\", toggleTheme);\r\n\r\n  function toggleTheme() {\r\n    const currentTheme = document.documentElement.getAttribute(\"data-theme\");\r\n\r\n    let newTheme;\r\n    if (currentTheme === \"dark\") {\r\n      newTheme = \"light\";\r\n    } else {\r\n      newTheme = \"dark\";\r\n    }\r\n\r\n    userHasChosenTheme = true;\r\n\r\n    setTheme(newTheme);\r\n  }\r\n\r\n  function setTheme(theme) {\r\n    document.documentElement.setAttribute(\"data-theme\", theme);\r\n    if (userHasChosenTheme) {\r\n      localStorage.setItem(\"theme\", theme);\r\n    }\r\n  }\r\n\r\n  const savedTheme = localStorage.getItem(\"theme\");\r\n\r\n  if (savedTheme) {\r\n    setTheme(savedTheme);\r\n  } else {\r\n    const themeByBrowser = getThemeByBrowserSetting();\r\n    if (themeByBrowser === \"dark\") {\r\n      setTheme(\"dark\");\r\n    } else {\r\n      const themeByTime = getThemeByTime();\r\n      setTheme(themeByTime);\r\n    }\r\n  }\r\n\r\n  function getThemeByTime() {\r\n    const now = new Date();\r\n    const hours = now.getHours();\r\n    return hours >= 7 && hours < 22 ? \"light\" : \"dark\";\r\n  }\r\n}\r\n\r\nfunction getThemeByBrowserSetting() {\r\n  if (\r\n    window.matchMedia &&\r\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches\r\n  ) {\r\n    return \"dark\";\r\n  } else {\r\n    return \"light\";\r\n  }\r\n}\r\n","export function calcDayLength(sunrise, sunset) {\r\n  const diffInSeconds = sunset - sunrise;\r\n  const hours = Math.floor(diffInSeconds / 3600);\r\n  const minutes = Math.floor((diffInSeconds % 3600) / 60);\r\n\r\n  return `${hours} час ${minutes} мин`;\r\n}\r\n","export const calcSunPosition = (sunrise, sunset) => {\r\n  const now = Math.floor(Date.now() / 1000);\r\n  const totalDayLength = sunset - sunrise;\r\n  const elapsedTime = now - sunrise;\r\n\r\n  const percentage = elapsedTime / totalDayLength;\r\n  return percentage;\r\n};\r\n\r\nexport const updateSunPosition = (sunPosition) => {\r\n  const sun = document.querySelector(\".sun-graphic circle\");\r\n\r\n  if (sunPosition < 0 || sunPosition > 1) {\r\n    sun.setAttribute(\"visibility\", \"hidden\");\r\n    return;\r\n  }\r\n\r\n  sun.setAttribute(\"visibility\", \"visible\");\r\n\r\n  const startX = 20;\r\n  const endX = 180;\r\n  const horizonY = 35;\r\n  const arcRadius = 45;\r\n\r\n  const x = startX + sunPosition * (endX - startX);\r\n  const y = horizonY - Math.sin(sunPosition * Math.PI) * arcRadius;\r\n\r\n  sun.setAttribute(\"cx\", x);\r\n  sun.setAttribute(\"cy\", y);\r\n};\r\n","export const capitalizeCity = (city) => {\r\n  if (!city) return city;\r\n\r\n  const citiesWithHyphens = [\"Комсомольск-на-Амуре\", \"Ростов-на-Дону\"];\r\n\r\n  if (citiesWithHyphens.includes(city)) {\r\n    return city\r\n      .toLowerCase()\r\n      .split(/[\\s-]/)\r\n      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n      .join(\"-\");\r\n  }\r\n\r\n  return city\r\n    .toLowerCase()\r\n    .split(/[\\s-]/)\r\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n    .join(\" \");\r\n};\r\n","import { showError } from \"../components/error.js\";\r\n\r\nconst cityInput = document.querySelector(\".city-input\");\r\n\r\nexport const isCyrillic = (text) => {\r\n  const cyrillicPattern = /^[А-Яа-яЁё\\s-]+$/;\r\n  return cyrillicPattern.test(text);\r\n};\r\n\r\ncityInput.addEventListener(\"input\", () => {\r\n  const inputValue = cityInput.value;\r\n\r\n  if (inputValue && !isCyrillic(inputValue)) {\r\n    showError(\"Введите на кириллице\");\r\n  } else {\r\n    showError(\"\");\r\n  }\r\n});\r\n","export const replaceAbbreviation = (city) => {\r\n  const lowerCaseCity = city.toLowerCase();\r\n\r\n  if (cityAbbreviations[lowerCaseCity]) {\r\n    return cityAbbreviations[lowerCaseCity];\r\n  }\r\n\r\n  return city;\r\n};\r\n\r\nconst cityAbbreviations = {\r\n  мск: \"Москва\",\r\n  спб: \"Санкт-Петербург\",\r\n  нск: \"Новосибирск\",\r\n};\r\n","export const formatDate = (date) => {\r\n  const datePart = date.toLocaleDateString(\"ru\", {\r\n    weekday: \"short\",\r\n    day: \"numeric\",\r\n    month: \"short\",\r\n  });\r\n\r\n  const timePart = date.toLocaleTimeString(\"ru\", {\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n  });\r\n\r\n  return `${datePart}, ${timePart}`;\r\n};\r\n\r\nexport const renderCurrentTime = () => {\r\n  const nowElement = document.querySelector(\".now\");\r\n  const currentTime = new Date();\r\n\r\n  const formattedTime = formatDate(currentTime);\r\n  nowElement.textContent = `Сейчас: ${formattedTime}`;\r\n};\r\n\r\nsetInterval(renderCurrentTime, 60000);\r\n","export function formatTime(unixTime, timezone) {\r\n  const localTime = unixTime + timezone;\r\n\r\n  const date = new Date(localTime * 1000);\r\n\r\n  const hours = date.getUTCHours();\r\n  const minutes = date.getUTCMinutes();\r\n\r\n  return `${hours}:${minutes < 10 ? \"0\" + minutes : minutes}`;\r\n}\r\n","export const updateHumidityScale = (humidity) => {\r\n  const parameter = document.querySelector(\".parameter\");\r\n\r\n  parameter.style.width = `${humidity}%`;\r\n};\r\n","import { capitalizeCity } from \"./capitalize.js\";\r\n\r\nexport const saveCityToLocalStorage = (city) => {\r\n  const capitalizedCity = capitalizeCity(city);\r\n  let cities = JSON.parse(localStorage.getItem(\"recentCities\")) || [];\r\n  if (!cities.includes(capitalizedCity)) {\r\n    cities.unshift(capitalizedCity);\r\n    if (cities.length > 5) {\r\n      cities.pop();\r\n    }\r\n    localStorage.setItem(\"recentCities\", JSON.stringify(cities));\r\n  }\r\n};\r\n","export function updateWindDirection(windDeg) {\r\n  const windIcon = document.getElementById(\"wind-direction-icon\");\r\n  const windText = document.getElementById(\"wind-direction-text\");\r\n\r\n  const iconRotation = (windDeg + 180) % 360;\r\n  windIcon.style.transform = `rotate(${iconRotation}deg)`;\r\n\r\n  const directions = [\"С\", \"СВ\", \"В\", \"ЮВ\", \"Ю\", \"ЮЗ\", \"З\", \"СЗ\"];\r\n  const normalizedDegrees = (windDeg + 360) % 360;\r\n  const index = Math.round(normalizedDegrees / 45) % 8;\r\n  windText.textContent = directions[index] || \"Н/Д\";\r\n}\r\n","import { switchTheme } from \"./components/switchTheme.js\";\r\nimport { getGeoData } from \"./api/geoData.js\";\r\nimport { getWeatherByForm } from \"./components/inputForm.js\";\r\nimport { renderCurrentTime } from \"./helpers/currentTime.js\";\r\nimport { geoLocation } from \"./components/geoLocation.js\";\r\nimport { scrollToTop } from \"./components/scrollToTop.js\";\r\nimport { getCurrentYear } from \"./components/currentYear.js\";\r\n\r\nexport function initApp() {\r\n  switchTheme();\r\n  getGeoData();\r\n  getWeatherByForm();\r\n  renderCurrentTime();\r\n  geoLocation();\r\n  scrollToTop();\r\n  getCurrentYear();\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import \"./styles/main.css\";\r\n\r\nimport { initApp } from \"./init.js\";\r\n\r\ninitApp();\r\n\r\nfunction causeRuntimeError() {\r\n  const obj = { key: \"value\" };\r\n  console.log(obj.undefinedProperty.someValue);\r\n}\r\n\r\ncauseRuntimeError();\r\n"],"names":[],"sourceRoot":""}